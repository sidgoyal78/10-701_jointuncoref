1. Mention Extraction

-> Extracted mentions can differ from the ones specified in gold labels - modify scoring procedure

-> Entity mentions: nominal and pronominal mentions, extraction using the module in stanford entity coreference resolution system

-> Event mentions: verbal mentions (Penn Treebank POS tag starts with VB), discount some copulative/auxillary verbs (have, be, seem), contiguous words with pos tag VB* correspond to a single event 

POS tagging:
>>> import nltk
>>> inpstr = 'I shot an elephant in my pajamas'
>>> text = nltk.word_tokenize(inpstr)
>>> type(text)
<type 'list'>
>>> text
['I', 'shot', 'an', 'elephant', 'in', 'my', 'pajamas']
>>> nltk.pos_tag(text)
[('I', 'PRP'), ('shot', 'VBD'), ('an', 'DT'), ('elephant', 'NN'), ('in', 'IN'), ('my', 'PRP$'), ('pajamas', 'NN')]

--------------------------------------------------------------------------------

2. Event Mentions - Lexical features (Ahn)

-> Head word (word2vec): dependency parsing (of the mention out of context? or of the entire sentence where the mention occurs?)

-> Lemma of the head word (word2vec): stemming/lemmatization - wordnet lemmatizer and lancaster stemmer do not work for the examples in the Stanford paper

>>> from nltk.stem import SnowballStemmer
>>> ss = SnowballStemmer('english')
>>> ss.stem('mudered')
u'muder'
>>> ss.stem('murders')
u'murder'
>>> ss.stem('murdered')
u'murder'
>>> ss.stem('hitting')
u'hit'
>>> ss.stem('shot')
u'shot'
>>> ss.stem('shoot')
u'shoot'

-> POS tag of head word (long binary vector): Penn Treebank POS tags using nltk.pos_tag (see section 1)

-> Word class of head word (long binary vector): Whether POS tag indicates a Verb, Noun, Adjective or Other

* -> Event class of the head word (long binary vector): Uses a pretrained ML model from another paper

-> Depth of word in Parse Tree of head word (integer): syntactic parsing

--------------------------------------------------------------------------------

3. Event Mentions - WordNet Features (Ahn)

-> Wordnet Synset Id (long binary vector): If the word is in catgory c and there is a corresponding WordNet entry, the ID of the synset of first sense

-> Wordnet Synset Id (long binary vector): Otherwise, if the word has an entry in WordNet that is morphologically related to a synset of category c, the ID of the related synset is a feature value

>>> from nltk.corpus import wordnet as wn
>>> wn.synsets('dog')
[Synset('dog.n.01'), Synset('frump.n.01'), Synset('dog.n.03'), Synset('cad.n.01'), Synset('frank.n.02'), Synset('pawl.n.01'), Synset('andiron.n.01'), Synset('chase.v.01')]

--------------------------------------------------------------------------------

4. Event Mentions - Left and Right Context Features (Ahn)

-> Lemmas of three words to the left/right (word2vec): exclude stop words

-> POS tags of the above words (long binary vector): exclude stop words

>>> from nltk.corpus import stopwords
>>> swe = stopwords.words('english')
>>> type(swe)
<type 'list'>
>>> len(swe)
127

--------------------------------------------------------------------------------

5. Event Mentions - Dependency Features (Ahn)

-> Label of dependency relation (long binary vector): if the candidate word is the dependent in a dependency relation

-> Dependency head word (word2vec)

-> Dependency POS tag (long binary vector)

* -> Entity type ???

